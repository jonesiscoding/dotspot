#!/bin/bash

#
# Internal Functions
#
lightblueb="\033[1;36m"
redb="\033[1;31m"
end="\033[0m"
iecho() {
  echo -e "${lightblueb}${1}${end}";
}

eecho() {
  echo -e "${redb}${1}${end}";
}

# Installs composer to be accessed by docker containers
function _assertComposer() {
  if [ ! -f ${DSTACK_SCRIPTS}/composer ]; then
    TWD="$(pwd)"
    echo "Installing Composer..."
    cd ${DSTACK_SCRIPTS}
      EXPECTED_SIGNATURE="$(wget -q -O - https://composer.github.io/installer.sig)"
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

    if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]; then
        >&2 eecho '  ERROR: Invalid Compser Installer Signature! Exiting.'
        rm composer-setup.php
        cd $TWD
        return 1
    fi

    php composer-setup.php --quiet
    if [ -f ${DSTACK_SCRIPTS}/composer.phar ]; then
      mv ${DSTACK_SCRIPTS}/composer.phar ${DSTACK_SCRIPTS}/composer;
      chmod 755 ${DSTACK_SCRIPTS}composer;
      rm composer-setup.php
    else
      eecho "  ERROR: Composer did not properly install! Exiting."
      rm composer-setup.php
      cd $TWD
      return 1
    fi
    cd $TWD
  fi
}

# Installs a script to be accessed by docker containers and used when logging in to the shell
function _assertBashContainer() {
  if [ ! -f ${DSTACK_SCRIPTS}/bash-container ]; then
    iecho "  Creating Container Bash Initializer..."
    echo "#!/bin/bash

  cd /Sites/_code
  export PATH=${DSTACK_SCRIPTS}:\$PATH

  # START LOCAL ADDITIONS



  # END LOCAL ADDITONS

  exec /bin/bash -l" >> ${DSTACK_SCRIPTS}/bash-container;
    chmod 755 ${DSTACK_SCRIPTS}/bash-container;
  fi
}

function _getStacks() {
  if [ -d "$1" ]; then
    TWD="$(pwd)"
    cd "$1" 2>&1
    STACKS=()
    while IFS= read -r line; do
      STACKS+=("${line}")
    done < <(docker-compose ps --services)
    cd "$TWD" 2>&1
  fi
}

function _getStacksRecursive() {
  TWD=$(pwd)
  STKS=()
  for d in ${1}/* ; do
    cd "$d"
    bname=$(basename ${d})
    while IFS= read -r line; do
      STKS+=("${bname}:${line}")
    done < <(docker-compose ps --services)
  done
  cd "$TWD"
}

function _cacheStacks() {
  STACKS=()
  _getStacks ${DSTACK_PREFERRED}
  STACKS+=(${STKS[@]})
  _getStacksRecursive ${DSTACK_ROOT}
  STACKS+=(${STKS[@]})
  printf "%s\n" "${STACKS[@]}" > ${DSTACK_CACHE}
}

function _isCacheFresh() {
  if [ ! -f "${DSTACK_CACHE}" ]; then
    return 1
  else
    CACHEDATE=$(stat -f "%Sm" -t "%Y%m%d%H%M" "${DSTACK_CACHE}")
    for d in ${DSTACK_ROOT}/* ; do
      if [ -f "${d}/docker-compose.yml" ]; then 
        FILEDATE=$(stat -f "%Sm" -t "%Y%m%d%H%M" "${d}/docker-compose.yml")
        if [ $FILEDATE -gt $CACHEDATE ]; then
          return 1
        fi
      fi
    done
  fi
  return 0
}

function _readCache() {
  STACKS=()
  while IFS= read -r line; do
    STACKS+=("${line}")
  done < <(cat "$DSTACK_CACHE")
}

function _composeStack() {
  if [ ! -z "$2" ]; then
    TWD=$(pwd)
    IFS=':' # space is set as delimiter
    read -ra INPT <<< "$2"
    len=${#INPT[@]}

    if [ $len == 2 ]; then
      spath=${DSTACK_ROOT}/${INPT[0]}
      if [ ! -d "${spath}" ]; then
        eecho "Unknown Docker Stack.  Try: 'dk stacks --all' for a full list."
        return 1
      fi
      cd "$spath" 2>&1
      STACK=${INPT[1]}
    else
      cd "$DSTACK_PREFERRED"
      STACK="${2}"
    fi

    # Run the Command
    tcmd=$1
    if [ "${tcmd}" != "shell" ]; then
      /usr/local/bin/docker-compose $tcmd $STACK
    else
      if [ -z `docker-compose ps -q ${STACK}` ] || [ -z `docker ps -q --no-trunc | grep $(docker-compose ps -q ${STACK})` ]; then
        eecho "  ERROR: The matching docker container is not running.  Please run it with 'dk up ${STACK}' first."
        return 1
      fi

      docker-compose exec ${STACK} /bin/bash -c "exec su -s ${DSTACK_SCRIPTS}/bash-container www-data";
    fi

    if [ "${1}" != "up" ]; then
      cd "$TWD" 2>&1
    fi
  else
    eecho "No stack given.  Exiting.\n";
  fi
}

#
# Public Function
#
if [ -z "$DSTACK_SCRIPTS" ]; then 
  eecho "You must have a DSTACK_SCRIPTS environment variable set to use this utility."
  eecho "This must be the path to shared scripts which will be accessible in the container."
fi

if [ -z "$DSTACK_ROOT" ]; then 
  eecho "You must have a DSTACK_ROOT environment variable set to use this utility."
  eecho "This must be the path your docker compose configurations. Your docker-compose.yml"
  eecho "file(s) may be in the DSTACK_ROOT, or in subdirectories of the DSTACK_ROOT."
fi

if [ -z "$DSTACK_PREFERRED" ]; then 
  if [ ! -f "${DSTACK_ROOT}/docker-compose.yml" ]; then
    eecho "If your DSTACK_ROOT directory does not contain a docker-compose.yml file, then"
    eecho "you must have a DSTACK_PREFERRED environment variable set to use this utility."
    echo -e " "
    eecho "This must be the path to your preferred docker-compose.yml stack, a subdirectory"
    eecho "of your DSTACK_ROOT directory."
  fi
fi

if [ -z "$1" ]; then
    DKCMD="up"
else
  DKCMD="${1}"
fi

if [ ${DKCMD} == "ls" ]; then 

  # Get and Set Flags
  DKFORMAT="1";
  DKALL="No";
  DKQUIET="No";

  for i in "$@"; do
    if [ "${i}" == "--format=x" ] || [ "${i}" == "-x" ]; then
      DKFORMAT="x"
    fi
    if [ "${i}" == "--all" ] || [ "${i}" == "-a" ]; then
      DKALL="Yes"
    fi
    if [ "${i}" == "--quiet" ] || [ "${i}" == "-q" ]; then
      DKQUIET="Yes"
    fi
  done

  # Set Stacks
  if [ "${DKALL}" == "Yes" ]; then
      _isCacheFresh
      if [[ $? -eq 1 ]]; then
        _cacheStacks
      fi
      _readCache
  else
    _getStacks ${DSTACK_PREFERRED}
  fi

  # Display Stacks
  if [ ! "${DKQUIET}" == "Yes" ]; then
    iecho "\nThe following Docker Compose stacks are accessible. To use one, try dk <action> <stack>\n"
  fi
  if [ "${DKFORMAT}" == "x" ]; then
    STACKLIST=$( IFS=$'\n'; echo "${STACKS[*]}" )
    echo -e $STACKLIST
  else
    for i in ${STACKS[@]}; do echo -e $i; done
  fi  
  
  # Exit Successful
  exit 0
elif [ "${DKCMD}" == "up" ] || [ "${DKCMD}" == "down" ]|| [ "${DKCMD}" == "start" ] || [ "${DKCMD}" == "stop" ] || [ "${DKCMD}" == "shell" ] ; then

  _composeStack ${DKCMD} ${2}

else

  eecho "Unrecognized Command. Try down, ls, up, shell, start, or stop."
  exit 1

fi

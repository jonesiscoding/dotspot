#!/usr/bin/env zsh

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_" || return;
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || return;
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local size zippedSize tmpFile cmd=""
  # shellcheck disable=SC2124
	tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	# shellcheck disable=SC2199
	if [[ -n $@ ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*
  fi;
}

# Use Git’s colored diff when available
if hash git &>/dev/null; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
  local mimeType
  mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Compare original and gzipped file size
function gz() {
  local origsize gzipsize ratio
  origsize=$(wc -c < "$1");
	gzipsize=$(gzip -c "$1" | wc -c);
	ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  local domain tmp certText

	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

function ssh-hostgen() {
  local iDomain iHost iUser iPort in target platform fqdn

  # Input
  in="$1"
  # Host
  iHost=$(echo "$in" | cut -d '@' -f 2)
  if ! grep -q "$iHost" ~/.ssh/config && ! grep -q "$iHost" ~/.ssh/config.local; then
    # Username
    if echo "$in" | grep -q "@"; then
      iUser=$(echo "$in" | cut -d '@' -f 1)
    fi
    [ -z "$iUser" ] && [ -n "$SSH_USER" ] && iUser="$SSH_USER"
    [ -z "$iUser" ] && iUser="$USER"
    # Domain
    iDomain=$(echo "$in" | cut -d '.' -f 2- | grep "\.")
    if [ -z "$iDomain" ]; then
      platform=$(uname -s)
      if [ "$platform" = "Darwin" ]; then
        iDomain=$(scutil --get HostName | cut -d '.' -f 2- | grep "\.")
      elif [ -n "$HOSTNAME" ]; then
        iDomain=$(echo "$HOSTNAME" | cut -d '.' -f 2- | grep "\.")
      fi
    fi
    [ -z "$iDomain" ] && iDomain=".local"
    # FQDN
    fqdn="$1.$iDomain"
    # Port
    iPort=22
    if echo "$in" | grep -q ":"; then
      iPort=$(echo "$in" | cut -d ':' -f 2)
    fi
    # Target File
    target="$HOME/.ssh/config"
    if [[ -f "${target}.local" ]]; then
      target="${target}.local"
    fi

    echo "Adding Host '$iHost' to SSH Config..."
    cat >> ~/.ssh/config.local << EOF
Host $iHost
    Hostname $fqdn
    User $iUser
    Port $iPort
EOF
  else
    echo "Host '$iHost' is already present in SSH Config."
  fi
}
